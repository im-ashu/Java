package com.leetcode;

import java.util.Arrays;

public class MinimizeMalwareSpread {

  private int[] size;
  private int[] id;

  public static void main(String[] args) {
    int[][] graph = {{1, 1, 0}, {1, 1, 0}, {0, 0, 1}};
    int[] initial = {0, 1};

    System.out.println(new MinimizeMalwareSpread().minMalwareSpread(graph, initial));
  }

  public int find(int p) {
    int root = p;
    while (root != id[root]) {
      root = id[root];
    }

    while (p != root) {
      int rootP = id[p];
      id[p] = root;
      p = rootP;
    }
    return root;
  }

  public void merge(int p, int q) {
    int rootP = find(p);
    int rootQ = find(q);
    if (rootP != rootQ) {
      if (size[rootP] > size[rootQ]) {
        size[rootP] += size[rootQ];
        id[rootQ] = rootP;
      } else {
        size[rootQ] += size[rootP];
        id[rootP] = rootQ;
      }
    }
  }

  public int minMalwareSpread(int[][] graph, int[] initial) {
    int n = graph.length;
    this.size = new int[n];
    this.id = new int[n];

    for (int i = 0; i < n; i++) {
      size[i] = 1;
      id[i] = i;
    }
    for (int i = 0; i < n; i++) {
      for (int j = 0; j < n; j++) {
        if (graph[i][j] == 1) {
          merge(i, j);
        }
      }
    }

    Arrays.sort(initial);
    int ans = -1;
    int maxSize = -1;

    int[] infected = new int[n];

    for (int e : initial) {
      int p = find(e);
      infected[p]++;
    }

    for (int e : initial) {
      int p = find(e);
      if (infected[p] == 1 && maxSize < size[p]) {
        maxSize = size[p];
        ans = e;
      }
    }

    if (ans == -1) {
      ans = initial[0];
    }
    return ans;
  }

}
